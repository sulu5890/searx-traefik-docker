version: '3.7'

services:

  traefik:
    image: "traefik:v2.3"
    restart: unless-stopped
    container_name: "traefik"
    command:
      #- "--api.insecure=true"
      #- "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Uncomment below to enable letsencrypt test server (will not hit letsencrypt limit, not a valid certificate.)
      #- "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL:-internal}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/certificates/acme.json"
    ports:
      - "443:443"
      - "80:80"
      #- "8080:8080"
    volumes:
      - "traefik-certificates:/certificates:rw"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      # Catchall router to redirect http to https (301)
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=to-https"
      - "traefik.http.routers.http-catchall.priority=10000"
# Force HTTPS middleware, applied to all requests.
      - "traefik.http.middlewares.to-https.redirectScheme.scheme=https"
      - "traefik.http.middlewares.to-https.redirectScheme.permanent=true"

      # Filtron compression and internal headers middleware
      - "traefik.http.middlewares.searx-filtron.compress=true"

      # Header middleware for searx global
      - "traefik.http.middlewares.searx-global-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.searx-global-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.searx-global-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.searx-global-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.searx-global-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.searx-global-headers.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.middlewares.searx-global-headers.headers.featurePolicy=accelerometer 'none';ambient-light-sensor 'none'; autoplay 'none';camera 'none';encrypted-media 'none';focus-without-user-activation 'none'; geolocation 'none';gyroscope 'none';magnetometer 'none';microphone 'none';midi 'none';payment 'none';picture-in-picture 'none'; speaker 'none';sync-xhr 'none';usb 'none';vr 'none'"
      - "traefik.http.middlewares.searx-global-headers.headers.referrerPolicy=no-referrer"
      - "traefik.http.middlewares.searx-global-headers.headers.customResponseHeaders.X-Robots-Tag=noindex, noarchive, nofollow"

      # Header middleware for searx API
      - "traefik.http.middlewares.searx-api-headers.headers.accessControlAllowMethods=GET, OPTIONS"
      - "traefik.http.middlewares.searx-api-headers.headers.accessControlAllowOriginList=*"

      # Header middleware for static files
      - "traefik.http.middlewares.searx-static-headers.headers.customResponseHeaders.Cache-Control=public, max-age=31536000"
      
      # Header middleware for dynamic (not static) files
      - "traefik.http.middlewares.searx-dynamic-headers.headers.customResponseHeaders.Cache-Control=no-cache, no-store"
      - "traefik.http.middlewares.searx-dynamic-headers.headers.customResponseHeaders.Pragma=no-cache"
      
      # Header middleware for morty CSP
      - "traefik.http.middlewares.searx-morty-csp-headers.headers.contentSecurityPolicy=default-src 'none'; style-src 'self' 'unsafe-inline'; form-action 'self'; frame-ancestors 'self'; base-uri 'self'; img-src 'self' data:; font-src 'self'; frame-src 'self'"

      # Header middleware for searx CSP
      - "traefik.http.middlewares.searx-csp-headers.headers.contentSecurityPolicy=upgrade-insecure-requests; default-src 'none'; script-src 'self'; style-src 'sef' 'unsafe-inline'; form-action 'self'; font-src 'self'; frame-ancestors 'self'; base-uri 'self'; connect-src 'self' https://overpass-api.de; img-src 'self' data: https://*.tile.openstreetmap.org; frame-src https://www.youtube-nocookie.com https://player.vimeo.com https://www.dailymotion.com https://www.deezer.com https://www.mixcloud.com https://w.soundcloud.com https://embed.spotify.com"

  gostatic:
    container_name: "gostatic"
    image: pierrezemb/gostatic
    restart: unless-stopped
    volumes:
      - searx-checker:/srv/http
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.searx-status.rule=Host(`${SEARX_HOSTNAME:-localhost}`) && Path(`/status`)"
      - "traefik.http.routers.searx-status.tls.certresolver=letsencrypt"
      - "traefik.http.routers.searx-status.entrypoints=https"
      - "traefik.http.routers.searx-status.middlewares=searx-global-headers@docker,searx-api-headers@docker,searx-dynamic-headers@docker,searx-csp-headers@docker"
      - "traefik.http.services.gostatic-searx-traefik-docker.loadbalancer.server.port=8043"

  filtron:
    container_name: "filtron"
    image: dalf/filtron
    restart: unless-stopped
    ports:
      - "127.0.0.1:4041:4041"
    command: -listen 0.0.0.0:4040 -api 0.0.0.0:4041 -target searx:8080
    volumes:
      - ./rules.json:/etc/filtron/rules.json:rw
    read_only: true
    cap_drop:
      - ALL
    labels:
      - "traefik.enable=true"
      # Filtron Router
      - "traefik.http.routers.searx-filtron.rule=Host(`${SEARX_HOSTNAME:-localhost}`)"
      - "traefik.http.routers.searx-filtron.tls.certresolver=letsencrypt"
      - "traefik.http.routers.searx-filtron.entrypoints=https"
      - "traefik.http.routers.searx-filtron.middlewares=searx-global-headers@docker,searx-dynamic-headers@docker,searx-csp-headers@docker"
      # Filtron Static file Router
      - "traefik.http.routers.searx-static.rule=Host(`${SEARX_HOSTNAME:-localhost}`) && PathPrefix(`/static`)"
      - "traefik.http.routers.searx-static.tls.certresolver=letsencrypt"
      - "traefik.http.routers.searx-static.entrypoints=https"
      - "traefik.http.routers.searx-static.middlewares=searx-global-headers@docker,searx-static-headers@docker,searx-csp-headers@docker"
      - "traefik.http.services.filtron-searx-traefik-docker.loadbalancer.server.port=4040"

  searx:
    container_name: searx
    image: searx/searx:latest
    restart: unless-stopped
    command: ${SEARX_COMMAND:-}
    volumes:
      - ./searx:/etc/searx:rw
    environment:
      - BIND_ADDRESS=0.0.0.0:8080
      - BASE_URL=https://${SEARX_HOSTNAME:-localhost}/
      - MORTY_URL=https://${SEARX_HOSTNAME:-localhost}/morty/
      - MORTY_KEY=${MORTY_KEY}
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE

  morty:
    container_name: morty
    image: dalf/morty
    restart: unless-stopped
    command: -timeout 6 -ipv6
    environment:
      - MORTY_KEY=${MORTY_KEY}
      - MORTY_ADDRESS=0.0.0.0:3000
    logging:
      driver: none
    read_only: true
    cap_drop:
      - ALL
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.searx-morty.rule=Host(`${SEARX_HOSTNAME:-localhost}`) && PathPrefix(`/morty`)"
      - "traefik.http.routers.searx-morty.tls.certresolver=letsencrypt"
      - "traefik.http.routers.searx-morty.entrypoints=https"
      - "traefik.http.routers.searx-morty.middlewares=searx-global-headers@docker,searx-dynamic-headers@docker,searx-morty-csp-headers@docker"

  searx-checker:
    container_name: searx-checker
    image: searx/searx-checker
    restart: unless-stopped
    command: -cron -o html/data/status http://searx:8080
    volumes:
      - searx-checker:/usr/local/searx-checker/html/data:rw

volumes:
  searx-checker:
  traefik-certificates:
